# ==============================================
# BikeDreams Backend - Production Docker Compose
# ==============================================

version: '3.8'

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: bikedreams-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bikedreams_prod}
      POSTGRES_USER: ${POSTGRES_USER:-bikedreams_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/postgres-security.sql:/docker-entrypoint-initdb.d/02-security.sql:ro
    command: [
      "postgres",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "pg_stat_statements.max=10000",
      "-c", "pg_stat_statements.track=all",
      "-c", "log_statement=all",
      "-c", "log_min_duration_statement=1000",
      "-c", "max_connections=100",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200"
    ]
    # No exponemos el puerto en producción (solo interno)
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bikedreams_user} -d ${POSTGRES_DB:-bikedreams_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - bikedreams-backend
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ==========================================
  # Redis Cache & Session Store
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: bikedreams-redis-prod
    restart: unless-stopped
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD}",
      "--appendonly", "yes",
      "--appendfsync", "everysec",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--timeout", "300",
      "--tcp-keepalive", "60"
    ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bikedreams-backend
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp

  # ==========================================
  # BikeDreams Backend API
  # ==========================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: bikedreams/backend:latest
    container_name: bikedreams-api-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-bikedreams_user}:${DB_PASSWORD}@postgres:5432/${POSTGRES_DB:-bikedreams_prod}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      # Security
      JWT_SECRET: ${JWT_SECRET_KEY}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      # Server
      PORT: 3001
      HOST: 0.0.0.0
      NODE_ENV: production
      # Logging
      LOG_LEVEL: info
      SECURITY_LOG_LEVEL: warn
    # No exponemos directamente el puerto (va através de nginx)
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - bikedreams-backend
      - bikedreams-frontend
    volumes:
      - api_uploads:/app/uploads:rw
      - api_logs:/app/logs:rw
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ==========================================
  # Nginx Reverse Proxy & SSL Termination
  # ==========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: bikedreams-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bikedreams-frontend
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run
      - /var/cache/nginx

  # ==========================================
  # Backup Service (Opcional)
  # ==========================================
  backup:
    image: prodrigestivill/postgres-backup-local:15
    container_name: bikedreams-backup-prod
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-bikedreams_prod}
      POSTGRES_USER: ${POSTGRES_USER:-bikedreams_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_EXTRA_OPTS: "--schema=public --blobs"
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 30
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 3
      HEALTHCHECK_PORT: 8080
    volumes:
      - postgres_backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bikedreams-backend
    security_opt:
      - no-new-privileges:true

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/bikedreams_postgres_data
      o: bind
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/bikedreams_postgres_backups
      o: bind
  redis_data:
    driver: local
  api_uploads:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/volumes/bikedreams_api_uploads
      o: bind
  api_logs:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

# ==========================================
# Networks
# ==========================================
networks:
  bikedreams-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
  bikedreams-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
