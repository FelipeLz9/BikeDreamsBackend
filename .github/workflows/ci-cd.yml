name: BikeDreams Backend CI/CD

on:
  push:
    branches: [ main, develop, 'release/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================================================
  # Code Quality and Security Analysis
  # ================================================================
  
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
      continue-on-error: true

    - name: Upload ESLint Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: eslint-results.sarif

    - name: Run TypeScript Check
      run: npm run type-check

    - name: Check Dependencies for Vulnerabilities
      run: npm audit --audit-level=moderate

    - name: Run Dependency Review
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ================================================================
  # Unit and Integration Tests
  # ================================================================
  
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: analyze
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: bikedreams_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Setup Test Environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/bikedreams_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test

    - name: Run Database Migrations
      run: npm run migrate:test
      env:
        NODE_ENV: test

    - name: Run Unit Tests
      run: npm run test:unit -- --coverage --ci
      env:
        NODE_ENV: test

    - name: Run Integration Tests
      run: npm run test:integration -- --coverage --ci
      env:
        NODE_ENV: test

    - name: Run Security Tests
      run: bash scripts/run-security-tests.sh --ci
      env:
        NODE_ENV: test

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: bikedreams-backend

    - name: Store Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-reports/
          coverage/
        retention-days: 30

  # ================================================================
  # Docker Build and Registry
  # ================================================================
  
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [analyze, test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # ================================================================
  # Security Scanning
  # ================================================================
  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    permissions:
      security-events: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Container Security Scan
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ needs.build.outputs.image-tag }}
        fail-build: false
        severity-cutoff: critical
        acs-report-enable: true

    - name: Upload Anchore Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

  # ================================================================
  # Staging Deployment
  # ================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://api-staging.bikedreams.com

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} '
          cd /opt/bikedreams-backend &&
          git pull origin develop &&
          ./scripts/deploy.sh --env=staging --version=${{ github.sha }} --force
        '

    - name: Run Staging Health Check
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f https://api-staging.bikedreams.com/health || exit 1

    - name: Run Staging E2E Tests
      if: success()
      run: |
        npm ci
        npm run test:e2e -- --baseURL=https://api-staging.bikedreams.com

  # ================================================================
  # Production Deployment
  # ================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://api.bikedreams.com

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Deploy to Production
      run: |
        echo "Deploying to production server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} '
          cd /opt/bikedreams-backend &&
          git pull origin main &&
          ./scripts/deploy.sh --env=production --version=${{ github.sha }} --force
        '

    - name: Run Production Health Check
      run: |
        sleep 60  # Wait for deployment to complete
        curl -f https://api.bikedreams.com/health || exit 1

    - name: Run Production Smoke Tests
      if: success()
      run: |
        npm ci
        npm run test:smoke -- --baseURL=https://api.bikedreams.com

    - name: Notify Deployment Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 Production deployment successful!
          Version: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.event.head_commit.message }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Deployment Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Production deployment failed!
          Version: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Please check the logs and consider rollback.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================================================
  # Release Management
  # ================================================================
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        previous_tag=$(git describe --tags --abbrev=0 HEAD^)
        echo "## Changes since ${previous_tag}" > CHANGELOG.md
        git log ${previous_tag}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sbom.spdx.json
        asset_name: sbom.spdx.json
        asset_content_type: application/json

  # ================================================================
  # Performance and Load Testing
  # ================================================================
  
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Dependencies
      run: npm ci

    - name: Run Load Tests
      run: npm run test:load -- --target=https://api-staging.bikedreams.com
      continue-on-error: true

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: performance-reports/
        retention-days: 30

  # ================================================================
  # Cleanup and Maintenance
  # ================================================================
  
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, release]
    if: always()
    
    steps:
    - name: Delete Old Package Versions
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
